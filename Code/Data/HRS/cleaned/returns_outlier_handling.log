----------------------------------------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  /Volumes/SSD PRO/Github-forks/Chp2-BeliefsandTrust/Code/Data/HRS/cleaned/returns_outlier_handling.log
  log type:  text
 opened on:  19 Sep 2025, 10:24:38

. 
. set more off

. 
. local master "/Volumes/SSD PRO/Github-forks/Chp2-BeliefsandTrust/Code/Data/HRS/cleaned/hrs_2020_2022_master.dta"

. capture confirm file "`master'"

. if _rc {
.     di as error "ERROR: master file not found -> `master'"
.     exit 198
. }

. 
. use "`master'", clear

. di as txt "Using master file: `master'"
Using master file: /Volumes/SSD PRO/Github-forks/Chp2-BeliefsandTrust/Code/Data/HRS/cleaned/hrs_2020_2022_master.dta

. 
. * ---------------------------------------------------------------------
. * Define analysis universe and thresholds (easily adjustable)
. * ---------------------------------------------------------------------
. di as txt "=== Setting up outlier handling parameters ==="
=== Setting up outlier handling parameters ===

. 
. * Thresholds (change these as needed)
. local min_denom = 1000        // Minimum denominator threshold

. local trim_pct = 1            // Trim top/bottom percentage

. local winsor_pct = 1          // Winsorize tails percentage

. 
. di as txt "Parameters:"
Parameters:

. di as txt "  Minimum denominator: $`min_denom'"
  Minimum denominator: $1000

. di as txt "  Trim percentage: `trim_pct'%"
  Trim percentage: 1%

. di as txt "  Winsorize percentage: `winsor_pct'%"
  Winsorize percentage: 1%

. 
. * Define analysis universe
. capture drop analysis_ok

. gen byte analysis_ok = sample_res_both == 1 & ///
>                       !missing(r_2022_sample) & ///
>                       !missing(A_2020_sample) & ///
>                       !missing(F_2022_sample) & ///
>                       (A_2020_sample + 0.5*F_2022_sample) >= `min_denom'

. 
. * Report analysis universe
. quietly count if analysis_ok

. local n_analysis = r(N)

. quietly count if sample_res_both == 1

. local n_sample = r(N)

. di as txt "Analysis universe: `n_analysis' observations out of `n_sample' in sample"
Analysis universe: 4191 observations out of 4242 in sample

. di as txt "  (excluded `=`n_sample'-`n_analysis'' due to missing data or small denominators)"
  (excluded 51 due to missing data or small denominators)

. 
. * ---------------------------------------------------------------------
. * Original returns summary (analysis universe only)
. * ---------------------------------------------------------------------
. di as txt "=== Original returns summary (analysis universe) ==="
=== Original returns summary (analysis universe) ===

. summarize r_2022_sample if analysis_ok, detail

                        r_2022_sample
-------------------------------------------------------------
      Percentiles      Smallest
 1%    -.7470085      -3.722222
 5%    -.3860849      -3.467862
10%    -.2158859       -2.22163       Obs               4,191
25%            0      -2.005128       Sum of wgt.       4,191

50%     .1981546                      Mean           .6496228
                        Largest       Std. dev.      4.451051
75%     .5199021       53.93067
90%     1.158133       75.16129       Variance       19.81186
95%     1.961841       120.7694       Skewness       29.87563
99%     7.534588       202.3429       Kurtosis       1168.986

. tabstat r_2022_sample if analysis_ok, stats(n mean sd p50 p10 p90 p1 p99 min max) format(%12.4f)

    Variable |            N         Mean           SD          p50          p10          p90           p1          p99
-------------+--------------------------------------------------------------------------------------------------------
r_2022_sam~e |    4191.0000       0.6496       4.4511       0.1982      -0.2159       1.1581      -0.7470       7.5346
----------------------------------------------------------------------------------------------------------------------

    Variable |          Min          Max
-------------+--------------------------
r_2022_sam~e |      -3.7222     202.3429
----------------------------------------

. 
. * ---------------------------------------------------------------------
. * Trim returns (drop extreme tails)
. * ---------------------------------------------------------------------
. di as txt "=== Trimming returns (drop top/bottom `trim_pct'%) ==="
=== Trimming returns (drop top/bottom 1%) ===

. 
. * Calculate trim thresholds
. _pctile r_2022_sample if analysis_ok, p(`trim_pct' `=100-`trim_pct'')

. scalar trim_low = r(r1)

. scalar trim_high = r(r2)

. 
. di as txt "Trim thresholds: `=trim_low' to `=trim_high'"
Trim thresholds: -.747008547008547 to 7.534588235294118

. 
. * Create trimmed sample indicator
. capture drop keep_trim

. gen byte keep_trim = analysis_ok & inrange(r_2022_sample, trim_low, trim_high)

. 
. * Create trimmed returns variable
. capture drop r_2022_sample_trim

. gen double r_2022_sample_trim = r_2022_sample if keep_trim
(10,167 missing values generated)

. 
. * Report trimming results
. quietly count if keep_trim

. local n_trim = r(N)

. di as txt "Observations after trimming: `n_trim' (dropped `=`n_analysis'-`n_trim'')"
Observations after trimming: 4109 (dropped 82)

. 
. * Trimmed returns summary
. di as txt "Trimmed returns summary:"
Trimmed returns summary:

. summarize r_2022_sample if keep_trim, detail

                        r_2022_sample
-------------------------------------------------------------
      Percentiles      Smallest
 1%    -.5916031      -.7470085
 5%    -.3546588      -.7388759
10%    -.1908397      -.7374921       Obs               4,109
25%            0      -.7331804       Sum of wgt.       4,109

50%     .1981546                      Mean           .4010079
                        Largest       Std. dev.      .8590089
75%     .5093829       7.214286
90%     1.087248       7.359036       Variance       .7378963
95%     1.760597       7.407407       Skewness       3.975753
99%     4.763667       7.534588       Kurtosis       25.06399

. tabstat r_2022_sample if keep_trim, stats(n mean sd p50 p10 p90 p1 p99 min max) format(%12.4f)

    Variable |            N         Mean           SD          p50          p10          p90           p1          p99
-------------+--------------------------------------------------------------------------------------------------------
r_2022_sam~e |    4109.0000       0.4010       0.8590       0.1982      -0.1908       1.0872      -0.5916       4.7637
----------------------------------------------------------------------------------------------------------------------

    Variable |          Min          Max
-------------+--------------------------
r_2022_sam~e |      -0.7470       7.5346
----------------------------------------

. 
. * ---------------------------------------------------------------------
. * Winsorize returns (cap extreme tails)
. * ---------------------------------------------------------------------
. di as txt "=== Winsorizing returns (cap top/bottom `winsor_pct'%) ==="
=== Winsorizing returns (cap top/bottom 1%) ===

. 
. * Calculate winsorize thresholds
. _pctile r_2022_sample if analysis_ok, p(`winsor_pct' `=100-`winsor_pct'')

. scalar winsor_low = r(r1)

. scalar winsor_high = r(r2)

. 
. di as txt "Winsorize thresholds: `=winsor_low' to `=winsor_high'"
Winsorize thresholds: -.747008547008547 to 7.534588235294118

. 
. * Create winsorized returns
. capture drop r_2022_sample_winsor

. gen double r_2022_sample_winsor = r_2022_sample if analysis_ok
(10,085 missing values generated)

. replace r_2022_sample_winsor = winsor_low if analysis_ok & r_2022_sample < winsor_low
(41 real changes made)

. replace r_2022_sample_winsor = winsor_high if analysis_ok & r_2022_sample > winsor_high
(41 real changes made)

. 
. * Report winsorizing results
. quietly count if !missing(r_2022_sample_winsor)

. local n_winsor = r(N)

. di as txt "Observations after winsorizing: `n_winsor'"
Observations after winsorizing: 4191

. 
. * Winsorized returns summary
. di as txt "Winsorized returns summary:"
Winsorized returns summary:

. summarize r_2022_sample_winsor if analysis_ok, detail

                    r_2022_sample_winsor
-------------------------------------------------------------
      Percentiles      Smallest
 1%    -.7470085      -.7470085
 5%    -.3860849      -.7470085
10%    -.2158859      -.7470085       Obs               4,191
25%            0      -.7470085       Sum of wgt.       4,191

50%     .1981546                      Mean           .4595638
                        Largest       Std. dev.      1.109446
75%     .5199021       7.534588
90%     1.158133       7.534588       Variance       1.230871
95%     1.961841       7.534588       Skewness       4.241455
99%     7.534588       7.534588       Kurtosis       24.65968

. tabstat r_2022_sample_winsor if analysis_ok, stats(n mean sd p50 p10 p90 p1 p99 min max) format(%12.4f)

    Variable |            N         Mean           SD          p50          p10          p90           p1          p99
-------------+--------------------------------------------------------------------------------------------------------
r_20~_winsor |    4191.0000       0.4596       1.1094       0.1982      -0.2159       1.1581      -0.7470       7.5346
----------------------------------------------------------------------------------------------------------------------

    Variable |          Min          Max
-------------+--------------------------
r_20~_winsor |      -0.7470       7.5346
----------------------------------------

. 
. * ---------------------------------------------------------------------
. * Alternative winsorization: winsorize returns at different percentiles
. * ---------------------------------------------------------------------
. di as txt "=== Alternative winsorization methods ==="
=== Alternative winsorization methods ===

. 
. * Winsorize at 0.5% tails (more aggressive)
. _pctile r_2022_sample if analysis_ok, p(0.5 99.5)

. scalar winsor_05_low = r(r1)

. scalar winsor_05_high = r(r2)

. 
. capture drop r_2022_sample_winsor_05

. gen double r_2022_sample_winsor_05 = r_2022_sample if analysis_ok
(10,085 missing values generated)

. replace r_2022_sample_winsor_05 = winsor_05_low if analysis_ok & r_2022_sample < winsor_05_low
(20 real changes made)

. replace r_2022_sample_winsor_05 = winsor_05_high if analysis_ok & r_2022_sample > winsor_05_high
(20 real changes made)

. 
. di as txt "0.5% winsorized returns summary:"
0.5% winsorized returns summary:

. summarize r_2022_sample_winsor_05 if analysis_ok, detail

                   r_2022_sample_winsor_05
-------------------------------------------------------------
      Percentiles      Smallest
 1%    -.7470085      -.9307537
 5%    -.3860849      -.9307537
10%    -.2158859      -.9307537       Obs               4,191
25%            0      -.9307537       Sum of wgt.       4,191

50%     .1981546                      Mean           .5094962
                        Largest       Std. dev.      1.516776
75%     .5199021       15.06667
90%     1.158133       15.06667       Variance       2.300609
95%     1.961841       15.06667       Skewness       6.560945
99%     7.534588       15.06667       Kurtosis       55.99434

. tabstat r_2022_sample_winsor_05 if analysis_ok, stats(n mean sd p50 p10 p90 p1 p99 min max) format(%12.4f)

    Variable |            N         Mean           SD          p50          p10          p90           p1          p99
-------------+--------------------------------------------------------------------------------------------------------
r_2022_sa~05 |    4191.0000       0.5095       1.5168       0.1982      -0.2159       1.1581      -0.7470       7.5346
----------------------------------------------------------------------------------------------------------------------

    Variable |          Min          Max
-------------+--------------------------
r_2022_sa~05 |      -0.9308      15.0667
----------------------------------------

. 
. * Winsorize at 2% tails (less aggressive)
. _pctile r_2022_sample if analysis_ok, p(2 98)

. scalar winsor_2_low = r(r1)

. scalar winsor_2_high = r(r2)

. 
. capture drop r_2022_sample_winsor_2

. gen double r_2022_sample_winsor_2 = r_2022_sample if analysis_ok
(10,085 missing values generated)

. replace r_2022_sample_winsor_2 = winsor_2_low if analysis_ok & r_2022_sample < winsor_2_low
(83 real changes made)

. replace r_2022_sample_winsor_2 = winsor_2_high if analysis_ok & r_2022_sample > winsor_2_high
(83 real changes made)

. 
. di as txt "2% winsorized returns summary:"
2% winsorized returns summary:

. summarize r_2022_sample_winsor_2 if analysis_ok, detail

                   r_2022_sample_winsor_2
-------------------------------------------------------------
      Percentiles      Smallest
 1%    -.5908554      -.5908554
 5%    -.3860849      -.5908554
10%    -.2158859      -.5908554       Obs               4,191
25%            0      -.5908554       Sum of wgt.       4,191

50%     .1981546                      Mean            .418701
                        Largest       Std. dev.      .8691026
75%     .5199021          4.625
90%     1.158133          4.625       Variance       .7553393
95%     1.961841          4.625       Skewness       3.004959
99%        4.625          4.625       Kurtosis       13.83051

. tabstat r_2022_sample_winsor_2 if analysis_ok, stats(n mean sd p50 p10 p90 p1 p99 min max) format(%12.4f)

    Variable |            N         Mean           SD          p50          p10          p90           p1          p99
-------------+--------------------------------------------------------------------------------------------------------
r_2022_sam~2 |    4191.0000       0.4187       0.8691       0.1982      -0.2159       1.1581      -0.5909       4.6250
----------------------------------------------------------------------------------------------------------------------

    Variable |          Min          Max
-------------+--------------------------
r_2022_sam~2 |      -0.5909       4.6250
----------------------------------------

. 
. * ---------------------------------------------------------------------
. * Comparison of all methods
. * ---------------------------------------------------------------------
. di as txt "=== Comparison of all return methods ==="
=== Comparison of all return methods ===

. 
. di as txt "Original returns (analysis universe):"
Original returns (analysis universe):

. tabstat r_2022_sample if analysis_ok, stats(n mean sd p50) format(%12.4f)

    Variable |            N         Mean           SD          p50
-------------+----------------------------------------------------
r_2022_sam~e |    4191.0000       0.6496       4.4511       0.1982
------------------------------------------------------------------

. 
. di as txt "Trimmed returns (drop `trim_pct'% tails):"
Trimmed returns (drop 1% tails):

. tabstat r_2022_sample if keep_trim, stats(n mean sd p50) format(%12.4f)

    Variable |            N         Mean           SD          p50
-------------+----------------------------------------------------
r_2022_sam~e |    4109.0000       0.4010       0.8590       0.1982
------------------------------------------------------------------

. 
. di as txt "Winsorized returns (cap `winsor_pct'% tails):"
Winsorized returns (cap 1% tails):

. tabstat r_2022_sample_winsor if analysis_ok, stats(n mean sd p50) format(%12.4f)

    Variable |            N         Mean           SD          p50
-------------+----------------------------------------------------
r_20~_winsor |    4191.0000       0.4596       1.1094       0.1982
------------------------------------------------------------------

. 
. di as txt "0.5% winsorized returns:"
0.5% winsorized returns:

. tabstat r_2022_sample_winsor_05 if analysis_ok, stats(n mean sd p50) format(%12.4f)

    Variable |            N         Mean           SD          p50
-------------+----------------------------------------------------
r_2022_sa~05 |    4191.0000       0.5095       1.5168       0.1982
------------------------------------------------------------------

. 
. di as txt "2% winsorized returns:"
2% winsorized returns:

. tabstat r_2022_sample_winsor_2 if analysis_ok, stats(n mean sd p50) format(%12.4f)

    Variable |            N         Mean           SD          p50
-------------+----------------------------------------------------
r_2022_sam~2 |    4191.0000       0.4187       0.8691       0.1982
------------------------------------------------------------------

. 
. * ---------------------------------------------------------------------
. * Extreme value diagnostics
. * ---------------------------------------------------------------------
. di as txt "=== Extreme value diagnostics ==="
=== Extreme value diagnostics ===

. 
. di as txt "Top 20 original returns (analysis universe):"
Top 20 original returns (analysis universe):

. quietly count if analysis_ok

. di as txt "Total observations in analysis universe: " r(N)
Total observations in analysis universe: 4191

. gsort -r_2022_sample

. list HHID RSUBHH r_2022_sample A_2020_sample F_2022_sample yc_2022_sample cg_2022_sample yd_2022_sample in 1/20 if analysi
> s_ok

     +------------------------------------------------------------------------------------+
     |   HHID   RSUBHH   r_2022_..   A_2020~e   F_2022~e   yc_202~e   cg_202~e   yd_202~e |
     |------------------------------------------------------------------------------------|
  1. | 542873        0   202.34286     107000    -207000      18000     719000      28800 |
  2. | 071750        0   120.76942       4107          0          0     496000          0 |
  3. | 521706        0    75.16129     128000    -225000          0    1165000          0 |
  4. | 500742        0   53.930667     145000    -275000          0     422000      17520 |
  5. | 056038        1          47      10000          0          0     470000          0 |
     |------------------------------------------------------------------------------------|
  6. | 072912        0       43.75       8000          0          0     350000          0 |
  7. | 526166        1   43.733333       3000          0      12000     130000      10800 |
  8. | 033944        0   43.428571      72000    -130000          0     328000      24000 |
  9. | 173152        0          42     425000    -800000          0    1050000          0 |
 10. | 501977        0   27.477724      32670     -20000          0     645000      22080 |
     |------------------------------------------------------------------------------------|
 11. | 544898        0   23.488625     257000    -354000     128000    1751090          0 |
 12. | 535218        0   22.989474      41500     -64000          0     240000      21600 |
 13. | 524503        0        21.8       3000          0        400      65000          0 |
 14. | 532858        0        20.5      40000     -60000          0     205000          0 |
 15. | 540817        0   20.215122       8200          0          0     171200       5436 |
     |------------------------------------------------------------------------------------|
 16. | 543275        0      19.125     192500    -305000          0     765000          0 |
 17. | 527580        0   19.067406      38869          0          0     741131          0 |
 18. | 544252        0   18.509091       8000      -5000          0     115000      13200 |
 19. | 014224        0       17.75       9000      -2000          0     142000          0 |
 20. | 524219        0     16.0505      33000     -50000          4     150000      21600 |
     +------------------------------------------------------------------------------------+

. 
. di as txt "Top 20 winsorized returns:"
Top 20 winsorized returns:

. gsort -r_2022_sample_winsor

. list HHID RSUBHH r_2022_sample_winsor A_2020_sample F_2022_sample yc_2022_sample cg_2022_sample yd_2022_sample in 1/20 if 
> analysis_ok

     +------------------------------------------------------------------------------------+
     |   HHID   RSUBHH   r~_winsor   A_2020~e   F_2022~e   yc_202~e   cg_202~e   yd_202~e |
     |------------------------------------------------------------------------------------|
  1. | 500742        0   7.5345882     145000    -275000          0     422000      17520 |
  2. | 152630        0   7.5345882      34050      -1300          0     310450          0 |
  3. | 520098        1   7.5345882       8500          0          0      90000      25956 |
  4. | 535218        0   7.5345882      41500     -64000          0     240000      21600 |
  5. | 084298        0   7.5345882     319994          0          0    2885000          0 |
     |------------------------------------------------------------------------------------|
  6. | 918669        0   7.5345882      47209     -62000          0     186000      20400 |
  7. | 044977        2   7.5345882     110000          0          0    1630000       5472 |
  8. | 544852        0   7.5345882       9500          0          0      95000       8400 |
  9. | 501184        0   7.5345882       3000          0          0      28000          0 |
 10. | 014224        0   7.5345882       9000      -2000          0     142000          0 |
     |------------------------------------------------------------------------------------|
 11. | 525580        0   7.5345882       5000          0          0     100000      39600 |
 12. | 544888        0   7.5345882      10000          0          0     155000      12000 |
 13. | 526166        1   7.5345882       3000          0      12000     130000      10800 |
 14. | 544898        0   7.5345882     257000    -354000     128000    1751090          0 |
 15. | 013734        0   7.5345882      32000      -2000          0     251000       5400 |
     |------------------------------------------------------------------------------------|
 16. | 010989        0   7.5345882     117000     -18000         12     933000          0 |
 17. | 056038        1   7.5345882      10000          0          0     470000          0 |
 18. | 501386        0   7.5345882      65000          0       2000     830000      18000 |
 19. | 532858        0   7.5345882      40000     -60000          0     205000          0 |
 20. | 071750        0   7.5345882       4107          0          0     496000          0 |
     +------------------------------------------------------------------------------------+

. 
. di as txt "Bottom 20 original returns (analysis universe):"
Bottom 20 original returns (analysis universe):

. gsort r_2022_sample

. list HHID RSUBHH r_2022_sample A_2020_sample F_2022_sample yc_2022_sample cg_2022_sample yd_2022_sample in 1/20 if analysi
> s_ok

     +----------------------------------------------------------------------------------------+
     |   HHID   RSUBHH   r_2022_s~e   A_2020_~e   F_2022~e   yc_202~e   cg_2022_~e   yd_202~e |
     |----------------------------------------------------------------------------------------|
  1. | 187575        1   -3.7222222       82000     -20000      12000      -280000          0 |
  2. | 544707        0   -3.4678625       66900          0          0      -220000      12000 |
  3. | 541507        0   -2.2216296       13500          0         12         6500      36504 |
  4. | 903053        0   -2.0051282       39000          0          0       -65000      13200 |
  5. | 501328        0   -1.6020972      325650     598000      96000     -1075150      21600 |
     |----------------------------------------------------------------------------------------|
  6. | 502751        0   -1.4503991      280500     316000          0      -636000          0 |
  7. | 543338        0   -1.3087216      465000     744000       1200     -1039000      57600 |
  8. | 213391        1   -1.1568889        9000          0          0        -5000       5412 |
  9. | 500035        0   -1.1430334      381000     -16300        120      -426300          0 |
 10. | 542662        1   -1.0997442       20300      -1500          0       -21500          0 |
     |----------------------------------------------------------------------------------------|
 11. | 502196        0   -1.0838755      480000     469500       1800      -776500          0 |
 12. | 502271        2   -1.0371603      253100     215000          0      -374000          0 |
 13. | 045175        0   -1.0105852      500700          0          0      -500000       6000 |
 14. | 500277        2   -1.0015936      101000     300000          0      -225000      26400 |
 15. | 912430        0    -.9979802   3.150e+09     350000      97200   -3.144e+09      30000 |
     |----------------------------------------------------------------------------------------|
 16. | 915426        0   -.97012658      395000          0          0      -364000      19200 |
 17. | 543224        0   -.96973415       15300     165000        160       -65000      30000 |
 18. | 541454        0   -.96061776      470000     355000          0      -610000      12000 |
 19. | 014234        1   -.94678261      115000          0          0      -108880          0 |
 20. | 901467        0   -.94368219      699388          0          0      -660000          0 |
     +----------------------------------------------------------------------------------------+

. 
. di as txt "Bottom 20 winsorized returns:"
Bottom 20 winsorized returns:

. gsort r_2022_sample_winsor

. list HHID RSUBHH r_2022_sample_winsor A_2020_sample F_2022_sample yc_2022_sample cg_2022_sample yd_2022_sample in 1/20 if 
> analysis_ok

     +----------------------------------------------------------------------------------------+
     |   HHID   RSUBHH   r_~_winsor   A_2020_~e   F_2022~e   yc_202~e   cg_2022_~e   yd_202~e |
     |----------------------------------------------------------------------------------------|
  1. | 187575        1   -.74700855       82000     -20000      12000      -280000          0 |
  2. | 544707        0   -.74700855       66900          0          0      -220000      12000 |
  3. | 541507        0   -.74700855       13500          0         12         6500      36504 |
  4. | 903053        0   -.74700855       39000          0          0       -65000      13200 |
  5. | 501328        0   -.74700855      325650     598000      96000     -1075150      21600 |
     |----------------------------------------------------------------------------------------|
  6. | 502751        0   -.74700855      280500     316000          0      -636000          0 |
  7. | 543338        0   -.74700855      465000     744000       1200     -1039000      57600 |
  8. | 213391        1   -.74700855        9000          0          0        -5000       5412 |
  9. | 500035        0   -.74700855      381000     -16300        120      -426300          0 |
 10. | 542662        1   -.74700855       20300      -1500          0       -21500          0 |
     |----------------------------------------------------------------------------------------|
 11. | 502196        0   -.74700855      480000     469500       1800      -776500          0 |
 12. | 502271        2   -.74700855      253100     215000          0      -374000          0 |
 13. | 045175        0   -.74700855      500700          0          0      -500000       6000 |
 14. | 500277        2   -.74700855      101000     300000          0      -225000      26400 |
 15. | 912430        0   -.74700855   3.150e+09     350000      97200   -3.144e+09      30000 |
     |----------------------------------------------------------------------------------------|
 16. | 915426        0   -.74700855      395000          0          0      -364000      19200 |
 17. | 543224        0   -.74700855       15300     165000        160       -65000      30000 |
 18. | 541454        0   -.74700855      470000     355000          0      -610000      12000 |
 19. | 014234        1   -.74700855      115000          0          0      -108880          0 |
 20. | 901467        0   -.74700855      699388          0          0      -660000          0 |
     +----------------------------------------------------------------------------------------+

. 
. di as txt "Top 20 trimmed returns:"
Top 20 trimmed returns:

. gsort -r_2022_sample_trim

. list HHID RSUBHH r_2022_sample_trim A_2020_sample F_2022_sample yc_2022_sample cg_2022_sample yd_2022_sample in 1/20 if !m
> issing(r_2022_sample_trim)

     +------------------------------------------------------------------------------------+
     |   HHID   RSUBHH   r_2022_~m   A_2020~e   F_2022~e   yc_202~e   cg_202~e   yd_202~e |
     |------------------------------------------------------------------------------------|
  1. | 520098        1   7.5345882       8500          0          0      90000      25956 |
  2. | 079114        1   7.4074074      10400     -10000          0      40000          0 |
  3. | 501289        2   7.3590361      41500          0          0     315000       9600 |
  4. | 525206        0   7.2142857      70000          0          0     505000          0 |
  5. | 545789        0   7.1433071      31750          0          0     240000      13200 |
     |------------------------------------------------------------------------------------|
  6. | 903759        0   6.9897333      30000          0       5292     220000      15600 |
  7. | 528895        0   6.9833333      97000     -50000          0     502800          0 |
  8. | 544028        0   6.9699666     242400    -305000          0     626600          0 |
  9. | 544801        2    6.969697      33000          0          0     230000          0 |
 10. | 541948        0      6.8224     185000    -225000         24     515000      20400 |
     |------------------------------------------------------------------------------------|
 11. | 080860        0   6.8083282       5016      -3500          0      28500       6264 |
 12. | 528362        0   6.6656347      81300     -98000          0     247700      32400 |
 13. | 546041        0   6.4533333      10000      -5000       4800      55000      11400 |
 14. | 520682        1   6.4339394      82500          0          0     550000      19200 |
 15. | 545482        0         6.4      20000          0          0     128000          0 |
     |------------------------------------------------------------------------------------|
 16. | 542983        0        6.36      25000          0          0     159000          0 |
 17. | 541004        5   6.3183704      47000     -40000          0     190000      19404 |
 18. | 910143        7   6.3157895      19000          0          0     120000          0 |
 19. | 525248        0   6.2789615     204000    -200000         12     653000          0 |
 20. | 535347        0   6.2514286      90000     -75000          0     345000      16800 |
     +------------------------------------------------------------------------------------+

. 
. di as txt "Bottom 20 trimmed returns:"
Bottom 20 trimmed returns:

. gsort r_2022_sample_trim

. list HHID RSUBHH r_2022_sample_trim A_2020_sample F_2022_sample yc_2022_sample cg_2022_sample yd_2022_sample in 1/20 if !m
> issing(r_2022_sample_trim)

     +-------------------------------------------------------------------------------------+
     |   HHID   RSUBHH   r_2022_s~m   A_2020~e   F_2022~e   yc_202~e   cg_202~e   yd_202~e |
     |-------------------------------------------------------------------------------------|
  1. | 211614        0   -.74700855      51000      -8400          0     -33400       1560 |
  2. | 137183        0   -.73887588    4295000     -50000          0   -3155000          0 |
  3. | 524470        0    -.7374921      94900          0         12     -70000          0 |
  4. | 072950        0   -.73318037    1156800       5000         24    -850000          0 |
  5. | 500385        0   -.73132664     360000      -2400          0    -262400          0 |
     |-------------------------------------------------------------------------------------|
  6. | 013062        0   -.72727273      55000          0          0     -40000          0 |
  7. | 919174        0   -.70724638    1770000     -90000          0   -1220000          0 |
  8. | 545604        0   -.70588235      51000          0          0     -36000          0 |
  9. | 534998        0    -.6952008    1006000          0          0    -690000       9372 |
 10. | 542219        0   -.69342002    1169000          0          0    -785000      25608 |
     |-------------------------------------------------------------------------------------|
 11. | 500326        0   -.69322176    1195000          0          0    -820000       8400 |
 12. | 545688        0   -.68849137    1030000     -90000         36    -659000      19200 |
 13. | 078309        0   -.68829892      15505       -500          0     -10500          0 |
 14. | 540763        0   -.68137931     425000     600000       6000    -500000          0 |
 15. | 528181        0   -.66919192     326000     140000          0    -265000          0 |
     |-------------------------------------------------------------------------------------|
 16. | 501301        0   -.66666667     300000          0          0    -200000          0 |
 17. | 501198        0   -.66644068    1780000     -20000          0   -1170000       9600 |
 18. | 041046        0   -.66407934     167400     129000          0    -154000          0 |
 19. | 528921        0   -.66265417     875000     277000          0    -662000       9600 |
 20. | 529485        0   -.65768487     333000     -25000         12    -194000      16800 |
     +-------------------------------------------------------------------------------------+

. 
. * ---------------------------------------------------------------------
. * Save dataset with new outlier-handled variables
. * ---------------------------------------------------------------------
. save "`master'", replace
file /Volumes/SSD PRO/Github-forks/Chp2-BeliefsandTrust/Code/Data/HRS/cleaned/hrs_2020_2022_master.dta saved

. di as txt "Saved outlier-handled return variables to master: `master'"
Saved outlier-handled return variables to master: /Volumes/SSD PRO/Github-forks/Chp2-BeliefsandTrust/Code/Data/HRS/cleaned/h
> rs_2020_2022_master.dta

. 
. log close
      name:  <unnamed>
       log:  /Volumes/SSD PRO/Github-forks/Chp2-BeliefsandTrust/Code/Data/HRS/cleaned/returns_outlier_handling.log
  log type:  text
 closed on:  19 Sep 2025, 10:24:38
----------------------------------------------------------------------------------------------------------------------------
