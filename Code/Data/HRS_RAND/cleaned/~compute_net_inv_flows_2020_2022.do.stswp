*----------------------------------------------------------------------
* RAND: compute_net_flows_2022.do (mirror HRS checks/diagnostics; lowercase vars)
*----------------------------------------------------------------------
clear all
capture log close
log using "/Volumes/SSD PRO/Github-forks/Chp2-BeliefsandTrust/Code/Data/HRS_RAND/cleaned/compute_net_flows_2022.log", replace text

set more off

local master "/Volumes/SSD PRO/Github-forks/Chp2-BeliefsandTrust/Code/Data/HRS_RAND/cleaned/hrs_rand_2020_2022_master.dta"
capture confirm file "`master'"
if _rc {
    di as error "ERROR: master file not found -> `master'"
    exit 198
}

use "`master'", clear

di as txt "Using master file: `master'"

* ---------------------------------------------------------------------
* Optional: convert common special codes to Stata missing (numeric variables)
* ---------------------------------------------------------------------
local misscodes 999999998 999999999 -8 -9
foreach v of varlist _all {
    capture confirm numeric variable `v'
    if !_rc {
        foreach mc of local misscodes {
            quietly replace `v' = . if `v' == `mc'
        }
    }
}

* ---------------------------------------------------------------------
* Variables (2022)
* - private business: SR050 (invest), SR055 (sell)
* - stocks (private): SR063 (direction), SR064 (magnitude)
*   - public stocks (sold only): SR073 (sold)
* - real estate: SR030 (buy), SR035 (sold), SR045 (improvement costs)
* - IRA: SQ171_1, SQ171_2, SQ171_3
* - primary/secondary residence(s): SR007 (buy), SR013 (sell), SR024 (improvement costs)
* ---------------------------------------------------------------------

local vars_to_check "sr050 sr055 sr063 sr064 sr073 sr030 sr035 sr045 sq171_1 sq171_2 sq171_3 sr007 sr013 sr024"
di as txt "Checking existence of required 2022 variables..."
foreach v of local vars_to_check {
    capture confirm variable `v'
    if _rc {
        di as err "  WARNING: variable `v' not found in master dataset"
    }
    else {
        di as txt "  OK: `v' present"
    }
}

* Clean sr063
capture confirm variable sr063
if _rc {
    di as txt "sr063 not found; skipping sr063 cleaning/mapping."
}
else {
    di as txt "Cleaning sr063 (private stock net buyer/seller)..."
    quietly replace sr063 = . if inlist(sr063,8,9)
    quietly replace sr063 = 0 if sr063 == 3
    capture drop sr063_dir
    gen byte sr063_dir = . 
    replace sr063_dir = -1 if sr063 == 1
    replace sr063_dir =  1 if sr063 == 2
    replace sr063_dir =  0 if sr063 == 3
    di as txt "sr063 mapping summary (post-clean):"
    tab sr063, missing
    di as txt "sr063_dir summary:"
    tab sr063_dir, missing
}

* Flows
* --- Private business: sr055 (sell/inflow) minus sr050 (invest/outflow)
capture drop flow_bus_2022
gen double flow_bus_2022 = .
* both present -> net
replace flow_bus_2022 = sr055 - sr050 if !missing(sr055) & !missing(sr050)
* sell only -> positive inflow
replace flow_bus_2022 = sr055 if  missing(sr050) & !missing(sr055)
* buy only -> negative outflow
replace flow_bus_2022 = -sr050 if !missing(sr050) &  missing(sr055)
di as txt "Private business flow summary:"
summarize flow_bus_2022, detail

* --- Private stocks: sr063_dir * sr064
capture confirm variable sr064
if _rc {
    di as txt "sr064 (stock magnitude) missing -> setting flow_stk_private_2022 to missing"
    gen double flow_stk_private_2022 = .
}
else {
    capture drop flow_stk_private_2022
    gen double flow_stk_private_2022 = .
    replace flow_stk_private_2022 = sr063_dir * sr064 if !missing(sr063_dir) & !missing(sr064)
    di as txt "Private stock flow summary (sr063_dir * sr064):"
    summarize flow_stk_private_2022, detail
}

* --- Public stocks: sr073 is reported as sold amount (inflow). Keep positive.
capture confirm variable sr073
if _rc {
    di as txt "sr073 not found -> flow_stk_public_2022 missing"
    gen double flow_stk_public_2022 = .
}
else {
    capture drop flow_stk_public_2022
    gen double flow_stk_public_2022 = sr073
    di as txt "Public stock (sold) flow summary (sr073):"
    summarize flow_stk_public_2022, detail
}

* Combine private + public stocks into total stocks flow
capture drop flow_stk_2022
gen double flow_stk_2022 = cond(!missing(flow_stk_private_2022), flow_stk_private_2022, 0) + ///
                            cond(!missing(flow_stk_public_2022),  flow_stk_public_2022,  0)
replace flow_stk_2022 = . if missing(flow_stk_private_2022) & missing(flow_stk_public_2022)
di as txt "TOTAL stocks flow (2022) summary (missing when both components missing):"
summarize flow_stk_2022, detail

* Quick check: households with BOTH public (sr073) and private magnitude (sr064) present
di as txt "Checking overlap: sr073 (public sells) AND sr064 (private magnitude) both non-missing"
quietly count if !missing(sr073) & !missing(sr064)
di as txt "Count with sr073 & sr064 both present = " r(N)
quietly list hhid rsubhh sr073 sr064 flow_stk_public_2022 flow_stk_private_2022 in 1/10 if !missing(sr073) & !missing(sr064)

* --- Real estate: sr035 (sold, inflow) - sr030 (buy, outflow) - sr045 (improvement costs, outflow)
capture drop flow_re_2022
gen double flow_re_2022 = .
replace flow_re_2022 = cond(missing(sr035),0,sr035) - ( cond(missing(sr030),0,sr030) + cond(missing(sr045),0,sr045) ) if !missing(sr035) | !missing(sr030) | !missing(sr045)
di as txt "Real estate flow summary:"
summarize flow_re_2022, detail

* Overlap diagnostics for real estate raw components (buy/sell/improvements)
gen byte ok_buy  = !missing(sr030)
gen byte ok_sell = !missing(sr035)
gen byte ok_impr = !missing(sr045)
gen byte re_pattern = ok_sell*4 + ok_buy*2 + ok_impr
label define rePat 0 "none" 1 "impr only" 2 "buy only" 3 "buy+impr" 4 "sell only" 5 "sell+impr" 6 "sell+buy" 7 "sell+buy+impr"
label values re_pattern rePat
di as txt "Counts of buy/sell/improvements presence patterns (real estate):"
tab re_pattern, missing
quietly count if ok_sell & ok_buy & ok_impr
di as txt "Households with ALL THREE present = " r(N)

* --- IRA: sum sq171_1 sq171_2 sq171_3 (kept as reported)
capture drop flow_ira_2022
egen double flow_ira_2022 = rowtotal(sq171_1 sq171_2 sq171_3)
* Set to missing if ALL three components are missing
replace flow_ira_2022 = . if missing(sq171_1) & missing(sq171_2) & missing(sq171_3)
di as txt "IRA flow summary (row-sum of sq171_1/2/3; missing when all three missing):"
summarize flow_ira_2022, detail
tabstat flow_ira_2022, stats(n mean sd p50 min max) format(%12.2f)

* Overlap diagnostics for IRA components
gen byte ok_ira1 = !missing(sq171_1)
gen byte ok_ira2 = !missing(sq171_2)
gen byte ok_ira3 = !missing(sq171_3)
gen byte ira_pattern = ok_ira1*4 + ok_ira2*2 + ok_ira3
label define iraPat 0 "none" 1 "3 only" 2 "2 only" 3 "2+3" 4 "1 only" 5 "1+3" 6 "1+2" 7 "1+2+3"
label values ira_pattern iraPat
di as txt "Counts of presence patterns for IRA components (sq171_1/2/3):"
tab ira_pattern, missing

* --- Primary/secondary residence(s): sr013 (sell, inflow) - sr007 (buy, outflow) - sr024 (improvements, outflow)
capture drop flow_residences_2022
gen double flow_residences_2022 = .
replace flow_residences_2022 = cond(missing(sr013),0,sr013) - ( cond(missing(sr007),0,sr007) + cond(missing(sr024),0,sr024) ) if !missing(sr013) | !missing(sr007) | !missing(sr024)
di as txt "Primary/secondary residences flow summary:"
summarize flow_residences_2022, detail

* Ensure missing only when all three residence components are missing
replace flow_residences_2022 = . if missing(sr013) & missing(sr007) & missing(sr024)

* Overlap diagnostics for residence components (buy/sell/improvements)
gen byte ok_res_buy  = !missing(sr007)
gen byte ok_res_sell = !missing(sr013)
gen byte ok_res_impr = !missing(sr024)
gen byte res_pattern = ok_res_sell*4 + ok_res_buy*2 + ok_res_impr
label define resPat 0 "none" 1 "impr only" 2 "buy only" 3 "buy+impr" 4 "sell only" 5 "sell+impr" 6 "sell+buy" 7 "sell+buy+impr", replace
label values res_pattern resPat
di as txt "Counts of presence patterns for residence components (sr007/sr013/sr024):"
tab res_pattern, missing
quietly count if ok_res_sell & ok_res_buy & ok_res_impr
di as txt "Households with ALL THREE residence components present = " r(N)
* ---------------------------------------------------------------------
* Total net investment flows for 2022
* Missing only if ALL asset class flows are missing
* Otherwise, sum non-missing flows (treat missing as zero)
* ---------------------------------------------------------------------
capture drop flow_total_2022
gen double flow_total_2022 = .
* Check if at least one asset class has non-missing flow
egen byte any_flow_present = rownonmiss(flow_bus_2022 flow_re_2022 flow_stk_2022 flow_ira_2022 flow_residences_2022)
* Compute total only if at least one flow is present
replace flow_total_2022 = cond(missing(flow_bus_2022),0,flow_bus_2022) + ///
                         cond(missing(flow_re_2022),0,flow_re_2022) + ///
                         cond(missing(flow_stk_2022),0,flow_stk_2022) + ///
                         cond(missing(flow_ira_2022),0,flow_ira_2022) + ///
                         cond(missing(flow_residences_2022),0,flow_residences_2022) ///
                         if any_flow_present > 0
drop any_flow_present

di as txt "Total net investment flows (flow_total_2022) summary:"
summarize flow_total_2022, detail
quietly count if !missing(flow_total_2022)
di as txt "Records with flow_total_2022 computed = " r(N)

* ---------------------------------------------------------------------
* Diagnostics...
* ---------------------------------------------------------------------
* (Generic diagnostics removed)

save "`master'", replace
di as txt "Saved 2022 net-flow vars back to master: `master'"

log close

