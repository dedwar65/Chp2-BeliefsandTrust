*----------------------------------------------------------------------
* RAND: compute_mortgage_payments_2022.do
* Mirror HRS version structure, summaries, and diagnostics (lowercase RAND vars)
*----------------------------------------------------------------------
clear all
capture log close
log using "/Volumes/SSD PRO/Github-forks/Chp2-BeliefsandTrust/Code/Data/HRS_RAND/cleaned/compute_mortgage_payments_2022.log", replace text

set more off

local master "/Volumes/SSD PRO/Github-forks/Chp2-BeliefsandTrust/Code/Data/HRS_RAND/cleaned/hrs_rand_2020_2022_master.dta"
capture confirm file "`master'"
if _rc {
    di as error "ERROR: master file not found -> `master'"
    exit 198
}

use "`master'", clear
di as txt "Using master file: `master'"

* ---------------------------------------------------------------------
* Variable list for mortgages in RAND (lowercase analogs)
* sh025 - first mortgage payment amount
* sh029 - first mortgage payment frequency
* sh036 - second mortgage payment amount
* sh040 - second mortgage payment frequency
* sh175 - secondary residence first mortgage payment amount
* sh179 - secondary residence first mortgage payment frequency
* ---------------------------------------------------------------------

local amtvars "sh025 sh036 sh175"
local freqvars "sh029 sh040 sh179"

* ---------------------------------------------------------------------
* 1) Recode frequency codes 7/8/9 -> missing (BEFORE computations)
* ---------------------------------------------------------------------
di as txt "Recoding frequency codes 7,8,9 -> missing for mortgage frequency vars..."
foreach v of local freqvars {
    capture confirm variable `v'
    if _rc {
        di as txt "  Variable `v' not present -> skipping recode"
    }
    else {
        quietly count if inlist(`v',7,8,9)
        di as txt "  `v' records with codes 7/8/9 before recode = " r(N)
        quietly replace `v' = . if inlist(`v',7,8,9)
        quietly count if inlist(`v',7,8,9)
        di as txt "  `v' records with codes 7/8/9 after recode  = " r(N)
        quietly tab `v', missing
    }
}

* ---------------------------------------------------------------------
* 2) Clean amount variables: set common sentinel codes -> missing
* ---------------------------------------------------------------------
local amt_misscodes 9999998 9999999 -8 -9
di as txt "Cleaning mortgage amount sentinel codes to missing for: `amtvars'"
foreach v of local amtvars {
    capture confirm variable `v'
    if _rc {
        di as txt "  Amount variable `v' not found -> skipping"
    }
    else {
        foreach mc of local amt_misscodes {
            quietly replace `v' = . if `v' == `mc'
        }
        di as txt "  Summary for `v' after recoding sentinels:"
        summarize `v', detail
    }
}

* ---------------------------------------------------------------------
* 3) Define program to map freq -> annual multiplier (with counts)
* ---------------------------------------------------------------------
capture program drop map_freq_to_mult
program define map_freq_to_mult, rclass
    syntax varname
    local fq = "`varlist'"
    capture confirm variable `fq'
    if _rc {
        di as txt "  map_freq_to_mult: variable `fq' not found -> exiting program"
        exit 0
    }
    capture drop `fq'_mult
    gen double `fq'_mult = .
    quietly replace `fq'_mult = 52 if `fq' == 1
    quietly replace `fq'_mult = 24 if `fq' == 2
    quietly replace `fq'_mult = 12 if `fq' == 3
    quietly replace `fq'_mult = 4  if `fq' == 4
    quietly replace `fq'_mult = 2  if `fq' == 5
    quietly replace `fq'_mult = 1  if `fq' == 6
    quietly count if !missing(`fq'_mult)
    di as txt "  `fq'_mult nonmissing observations = " r(N)
    tab `fq', missing
end

* ---------------------------------------------------------------------
* 4) Apply mapping to each mortgage frequency var
* ---------------------------------------------------------------------
di as txt "Mapping mortgage frequency variables to multipliers..."
map_freq_to_mult sh029
map_freq_to_mult sh040
map_freq_to_mult sh179

* ---------------------------------------------------------------------
* 5) Compute annual payments: amount * multiplier
* ---------------------------------------------------------------------
di as txt "Computing annual mortgage payments (amount * multiplier)..."

capture confirm variable sh025
if _rc {
    di as txt "sh025 not found -> mort1_pay_annual set to missing"
    gen double mort1_pay_annual = .
}
else {
    capture confirm variable sh029_mult
    if _rc {
        di as txt "sh029_mult not found -> cannot annualize sh025 -> mort1_pay_annual missing"
        gen double mort1_pay_annual = .
    }
    else {
        gen double mort1_pay_annual = .
        replace mort1_pay_annual = sh025 * sh029_mult if !missing(sh025) & !missing(sh029_mult)
        di as txt "First mortgage annual payment summary (mort1_pay_annual):"
        summarize mort1_pay_annual, detail
 
    }
}

capture confirm variable sh036
if _rc {
    di as txt "sh036 not found -> mort2_pay_annual set to missing"
    gen double mort2_pay_annual = .
}
else {
    capture confirm variable sh040_mult
    if _rc {
        di as txt "sh040_mult not found -> cannot annualize sh036 -> mort2_pay_annual missing"
        gen double mort2_pay_annual = .
    }
    else {
        gen double mort2_pay_annual = .
        replace mort2_pay_annual = sh036 * sh040_mult if !missing(sh036) & !missing(sh040_mult)
        di as txt "Second mortgage annual payment summary (mort2_pay_annual):"
        summarize mort2_pay_annual, detail
 
    }
}

capture confirm variable sh175
if _rc {
    di as txt "sh175 not found -> secmort_pay_annual set to missing"
    gen double secmort_pay_annual = .
}
else {
    capture confirm variable sh179_mult
    if _rc {
        di as txt "sh179_mult not found -> cannot annualize sh175 -> secmort_pay_annual missing"
        gen double secmort_pay_annual = .
    }
    else {
        gen double secmort_pay_annual = .
        replace secmort_pay_annual = sh175 * sh179_mult if !missing(sh175) & !missing(sh179_mult)
        di as txt "Secondary mortgage annual payment summary (secmort_pay_annual):"
        summarize secmort_pay_annual, detail
 
    }
}

* ---------------------------------------------------------------------
* 6) Diagnostics: amount present but multiplier missing
* ---------------------------------------------------------------------
 

* ---------------------------------------------------------------------
* (Total across mortgage types will be computed in compute_returns)
* Save dataset with new mortgage payment variables BACK TO MASTER
* ---------------------------------------------------------------------
save "`master'", replace
di as txt "Saved mortgage payment vars back to master: `master'"

log close

